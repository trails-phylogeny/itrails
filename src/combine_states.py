import numpy as np

""" 
final_a = np.array([0.66658439, 0.33341561])
final_b = np.array([0.50016773, 0.49983227])
final_a_dict = {(0): np.array([0.66658439, 0.33341561])}
final_b_dict = {(0): np.array([0.50016773, 0.49983227])}

final_c_dict = {(0): np.array([0.62500004, 0.37499996])}

final_ab_dict = {
    ((-1, -1), (3, 3), (3, 3), (3, 3)): np.array(
        [
            0.03604373,
            0.0,
            0.10813112,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 3), (3, 3), (3, 3)): np.array(
        [
            0.02225876,
            0.0,
            0.06677614,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 3), (0, 3), (3, 3)): np.array(
        [
            0.02250786,
            0.0,
            0.06652704,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 3), (0, 3), (0, 3)): np.array(
        [
            0.0,
            0.00099669,
            0.0,
            0.0009967,
            0.00299008,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (3, 0), (3, 3), (3, 3)): np.array(
        [
            0.02225876,
            0.0,
            0.06677614,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (3, 0), (3, 0), (3, 3)): np.array(
        [
            0.02250786,
            0.0,
            0.06652704,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (3, 0), (3, 0), (3, 0)): np.array(
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0009967,
            0.0,
            0.0,
            0.0,
            0.00099669,
            0.0,
            0.00299008,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (3, 3), (3, 3)): np.array(
        [
            0.0314347,
            0.0,
            0.09430365,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (0, 3), (3, 3)): np.array(
        [
            0.02692155,
            0.0,
            0.07957262,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (0, 3), (0, 3)): np.array(
        [
            0.0,
            0.00119214,
            0.0,
            0.00119214,
            0.00357642,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (3, 0), (3, 3)): np.array(
        [
            0.02692155,
            0.0,
            0.07957262,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (3, 0), (3, 0)): np.array(
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.00119214,
            0.0,
            0.0,
            0.0,
            0.00119214,
            0.0,
            0.00357642,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (0, 0), (3, 3)): np.array(
        [
            0.0319141,
            0.0,
            0.09294037,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (0, 0), (0, 3)): np.array(
        [
            0.0,
            0.00137916,
            0.0,
            0.00137916,
            0.00408626,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (0, 0), (3, 0)): np.array(
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.00137916,
            0.0,
            0.0,
            0.0,
            0.00137916,
            0.0,
            0.00408626,
            0.0,
            0.0,
            0.0,
        ]
    ),
    ((-1, -1), (0, 0), (0, 0), (0, 0)): np.array(
        [
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            2.67783557e-05,
            6.83213312e-05,
            2.68046186e-05,
            0.00000000e00,
            6.83607224e-05,
            0.00000000e00,
            6.83607287e-05,
            6.83213312e-05,
            1.99939751e-04,
        ]
    ),
}
state_dict_a = {(1, 1): 0, (1, 2): 1}
state_dict_b = {(1, 1): 0, (1, 2): 1}
state_dict_c = {(1, 1): 0, (1, 2): 1}
state_dict_ab = {
    (1, 1, 1, 1): 0,
    (1, 2, 2, 2): 1,
    (1, 1, 2, 2): 2,
    (1, 2, 1, 1): 3,
    (1, 2, 3, 3): 4,
    (1, 1, 1, 2): 5,
    (1, 2, 2, 1): 6,
    (1, 2, 2, 3): 7,
    (1, 2, 1, 2): 8,
    (1, 1, 2, 1): 9,
    (1, 2, 3, 2): 10,
    (1, 1, 2, 3): 11,
    (1, 2, 1, 3): 12,
    (1, 2, 3, 1): 13,
    (1, 2, 3, 4): 14,
}
state_dict_abc = {
    (1, 1, 1, 1, 1, 1): 0,
    (1, 2, 2, 2, 2, 2): 1,
    (1, 1, 2, 2, 2, 2): 2,
    (1, 2, 1, 1, 1, 1): 3,
    (1, 2, 3, 3, 3, 3): 4,
    (1, 1, 1, 2, 2, 2): 5,
    (1, 2, 2, 1, 1, 1): 6,
    (1, 2, 2, 3, 3, 3): 7,
    (1, 2, 1, 2, 2, 2): 8,
    (1, 1, 2, 1, 1, 1): 9,
    (1, 2, 3, 2, 2, 2): 10,
    (1, 1, 2, 3, 3, 3): 11,
    (1, 2, 1, 3, 3, 3): 12,
    (1, 2, 3, 1, 1, 1): 13,
    (1, 2, 3, 4, 4, 4): 14,
    (1, 1, 1, 1, 2, 2): 15,
    (1, 2, 2, 2, 1, 1): 16,
    (1, 2, 2, 2, 3, 3): 17,
    (1, 2, 1, 1, 2, 2): 18,
    (1, 1, 2, 2, 1, 1): 19,
    (1, 2, 3, 3, 2, 2): 20,
    (1, 1, 2, 2, 3, 3): 21,
    (1, 2, 1, 1, 3, 3): 22,
    (1, 2, 3, 3, 1, 1): 23,
    (1, 2, 3, 3, 4, 4): 24,
    (1, 1, 2, 1, 2, 2): 25,
    (1, 2, 1, 2, 1, 1): 26,
    (1, 2, 3, 2, 3, 3): 27,
    (1, 2, 2, 1, 2, 2): 28,
    (1, 1, 1, 2, 1, 1): 29,
    (1, 2, 2, 3, 2, 2): 30,
    (1, 1, 2, 3, 2, 2): 31,
    (1, 2, 3, 1, 3, 3): 32,
    (1, 2, 1, 3, 1, 1): 33,
    (1, 2, 3, 4, 3, 3): 34,
    (1, 1, 1, 2, 3, 3): 35,
    (1, 2, 2, 1, 3, 3): 36,
    (1, 2, 2, 3, 1, 1): 37,
    (1, 2, 2, 3, 4, 4): 38,
    (1, 2, 1, 2, 3, 3): 39,
    (1, 1, 2, 1, 3, 3): 40,
    (1, 2, 3, 2, 1, 1): 41,
    (1, 2, 3, 2, 4, 4): 42,
    (1, 2, 1, 3, 2, 2): 43,
    (1, 2, 3, 1, 2, 2): 44,
    (1, 1, 2, 3, 1, 1): 45,
    (1, 2, 3, 4, 2, 2): 46,
    (1, 1, 2, 3, 4, 4): 47,
    (1, 2, 1, 3, 4, 4): 48,
    (1, 2, 3, 1, 4, 4): 49,
    (1, 2, 3, 4, 1, 1): 50,
    (1, 2, 3, 4, 5, 5): 51,
    (1, 1, 1, 1, 1, 2): 52,
    (1, 2, 2, 2, 2, 1): 53,
    (1, 2, 2, 2, 2, 3): 54,
    (1, 2, 1, 1, 1, 2): 55,
    (1, 1, 2, 2, 2, 1): 56,
    (1, 2, 3, 3, 3, 2): 57,
    (1, 1, 2, 2, 2, 3): 58,
    (1, 2, 1, 1, 1, 3): 59,
    (1, 2, 3, 3, 3, 1): 60,
    (1, 2, 3, 3, 3, 4): 61,
    (1, 1, 2, 1, 1, 2): 62,
    (1, 2, 1, 2, 2, 1): 63,
    (1, 2, 3, 2, 2, 3): 64,
    (1, 2, 2, 1, 1, 2): 65,
    (1, 1, 1, 2, 2, 1): 66,
    (1, 2, 2, 3, 3, 2): 67,
    (1, 1, 2, 3, 3, 2): 68,
    (1, 2, 3, 1, 1, 3): 69,
    (1, 2, 1, 3, 3, 1): 70,
    (1, 2, 3, 4, 4, 3): 71,
    (1, 1, 1, 2, 2, 3): 72,
    (1, 2, 2, 1, 1, 3): 73,
    (1, 2, 2, 3, 3, 1): 74,
    (1, 2, 2, 3, 3, 4): 75,
    (1, 2, 1, 2, 2, 3): 76,
    (1, 1, 2, 1, 1, 3): 77,
    (1, 2, 3, 2, 2, 1): 78,
    (1, 2, 3, 2, 2, 4): 79,
    (1, 2, 1, 3, 3, 2): 80,
    (1, 2, 3, 1, 1, 2): 81,
    (1, 1, 2, 3, 3, 1): 82,
    (1, 2, 3, 4, 4, 2): 83,
    (1, 1, 2, 3, 3, 4): 84,
    (1, 2, 1, 3, 3, 4): 85,
    (1, 2, 3, 1, 1, 4): 86,
    (1, 2, 3, 4, 4, 1): 87,
    (1, 2, 3, 4, 4, 5): 88,
    (1, 1, 1, 2, 1, 2): 89,
    (1, 2, 2, 1, 2, 1): 90,
    (1, 2, 2, 3, 2, 3): 91,
    (1, 2, 1, 2, 1, 2): 92,
    (1, 1, 2, 1, 2, 1): 93,
    (1, 2, 3, 2, 3, 2): 94,
    (1, 1, 2, 3, 2, 3): 95,
    (1, 2, 1, 3, 1, 3): 96,
    (1, 2, 3, 1, 3, 1): 97,
    (1, 2, 3, 4, 3, 4): 98,
    (1, 1, 2, 2, 1, 2): 99,
    (1, 2, 1, 1, 2, 1): 100,
    (1, 2, 3, 3, 2, 3): 101,
    (1, 2, 2, 2, 1, 2): 102,
    (1, 1, 1, 1, 2, 1): 103,
    (1, 2, 2, 2, 3, 2): 104,
    (1, 1, 2, 2, 3, 2): 105,
    (1, 2, 3, 3, 1, 3): 106,
    (1, 2, 1, 1, 3, 1): 107,
    (1, 2, 3, 3, 4, 3): 108,
    (1, 1, 1, 2, 3, 2): 109,
    (1, 2, 2, 3, 1, 3): 110,
    (1, 2, 2, 1, 3, 1): 111,
    (1, 2, 2, 3, 4, 3): 112,
    (1, 2, 1, 3, 2, 3): 113,
    (1, 1, 2, 3, 1, 3): 114,
    (1, 2, 3, 1, 2, 1): 115,
    (1, 2, 3, 4, 2, 4): 116,
    (1, 2, 1, 2, 3, 2): 117,
    (1, 2, 3, 2, 1, 2): 118,
    (1, 1, 2, 1, 3, 1): 119,
    (1, 2, 3, 2, 4, 2): 120,
    (1, 1, 2, 3, 4, 3): 121,
    (1, 2, 1, 3, 4, 3): 122,
    (1, 2, 3, 4, 1, 4): 123,
    (1, 2, 3, 1, 4, 1): 124,
    (1, 2, 3, 4, 5, 4): 125,
    (1, 1, 1, 1, 2, 3): 126,
    (1, 2, 2, 2, 1, 3): 127,
    (1, 2, 2, 2, 3, 1): 128,
    (1, 2, 2, 2, 3, 4): 129,
    (1, 2, 1, 1, 2, 3): 130,
    (1, 1, 2, 2, 1, 3): 131,
    (1, 2, 3, 3, 2, 1): 132,
    (1, 2, 3, 3, 2, 4): 133,
    (1, 2, 1, 1, 3, 2): 134,
    (1, 2, 3, 3, 1, 2): 135,
    (1, 1, 2, 2, 3, 1): 136,
    (1, 2, 3, 3, 4, 2): 137,
    (1, 1, 2, 2, 3, 4): 138,
    (1, 2, 1, 1, 3, 4): 139,
    (1, 2, 3, 3, 1, 4): 140,
    (1, 2, 3, 3, 4, 1): 141,
    (1, 2, 3, 3, 4, 5): 142,
    (1, 1, 2, 1, 2, 3): 143,
    (1, 2, 1, 2, 1, 3): 144,
    (1, 2, 3, 2, 3, 1): 145,
    (1, 2, 3, 2, 3, 4): 146,
    (1, 2, 2, 1, 2, 3): 147,
    (1, 1, 1, 2, 1, 3): 148,
    (1, 2, 2, 3, 2, 1): 149,
    (1, 2, 2, 3, 2, 4): 150,
    (1, 2, 3, 1, 3, 2): 151,
    (1, 2, 1, 3, 1, 2): 152,
    (1, 1, 2, 3, 2, 1): 153,
    (1, 2, 3, 4, 3, 2): 154,
    (1, 1, 2, 3, 2, 4): 155,
    (1, 2, 3, 1, 3, 4): 156,
    (1, 2, 1, 3, 1, 4): 157,
    (1, 2, 3, 4, 3, 1): 158,
    (1, 2, 3, 4, 3, 5): 159,
    (1, 1, 2, 1, 3, 2): 160,
    (1, 2, 3, 2, 1, 3): 161,
    (1, 2, 1, 2, 3, 1): 162,
    (1, 2, 3, 2, 4, 3): 163,
    (1, 2, 3, 1, 2, 3): 164,
    (1, 1, 2, 3, 1, 2): 165,
    (1, 2, 1, 3, 2, 1): 166,
    (1, 2, 3, 4, 2, 3): 167,
    (1, 2, 2, 1, 3, 2): 168,
    (1, 2, 2, 3, 1, 2): 169,
    (1, 1, 1, 2, 3, 1): 170,
    (1, 2, 2, 3, 4, 2): 171,
    (1, 1, 2, 3, 4, 2): 172,
    (1, 2, 3, 1, 4, 3): 173,
    (1, 2, 3, 4, 1, 3): 174,
    (1, 2, 1, 3, 4, 1): 175,
    (1, 2, 3, 4, 5, 3): 176,
    (1, 1, 1, 2, 3, 4): 177,
    (1, 2, 2, 1, 3, 4): 178,
    (1, 2, 2, 3, 1, 4): 179,
    (1, 2, 2, 3, 4, 1): 180,
    (1, 2, 2, 3, 4, 5): 181,
    (1, 2, 1, 2, 3, 4): 182,
    (1, 1, 2, 1, 3, 4): 183,
    (1, 2, 3, 2, 1, 4): 184,
    (1, 2, 3, 2, 4, 1): 185,
    (1, 2, 3, 2, 4, 5): 186,
    (1, 2, 1, 3, 2, 4): 187,
    (1, 2, 3, 1, 2, 4): 188,
    (1, 1, 2, 3, 1, 4): 189,
    (1, 2, 3, 4, 2, 1): 190,
    (1, 2, 3, 4, 2, 5): 191,
    (1, 2, 1, 3, 4, 2): 192,
    (1, 2, 3, 1, 4, 2): 193,
    (1, 2, 3, 4, 1, 2): 194,
    (1, 1, 2, 3, 4, 1): 195,
    (1, 2, 3, 4, 5, 2): 196,
    (1, 1, 2, 3, 4, 5): 197,
    (1, 2, 1, 3, 4, 5): 198,
    (1, 2, 3, 1, 4, 5): 199,
    (1, 2, 3, 4, 1, 5): 200,
    (1, 2, 3, 4, 5, 1): 201,
    (1, 2, 3, 4, 5, 6): 202,
}

 """


def combine_states(
    state_dict_1, state_dict_2, state_dict_sum, final_probs_1, final_probs_2
):
    len_array = len(list(state_dict_1.keys())[0]) + len(list(state_dict_2.keys())[0])
    init_comb_dict = {}
    init_comb_all = np.zeros((len(state_dict_sum.keys())), dtype=np.float64)
    for key_1, index_1 in state_dict_1.items():
        for key_2, index_2 in state_dict_2.items():
            counter = 0
            half_1 = len(key_1) // 2
            half_2 = len(key_2) // 2
            comb_state = np.zeros((len_array), dtype=np.int64)

            for i, left_1 in enumerate(key_1[:half_1]):
                comb_state[i] = left_1
                counter += 1

            for i, left_2 in enumerate(key_2[:half_2], start=counter):
                comb_state[i] = max(comb_state[: len_array // 2] + 1)
                counter += 1

            for i, right_1 in enumerate(key_1[half_1:], start=counter):
                comb_state[i] = (
                    right_1
                    if right_1 in key_1[:half_1]
                    else max(comb_state[: i + 1] + 1)
                )
                counter += 1

            for i, right_2 in enumerate(key_2[half_2:], start=counter):
                comb_state[i] = (
                    max(comb_state[: len_array // 2])
                    if right_2 in key_2[:half_2]
                    else max(comb_state[: i + 1] + 1)
                )
                counter += 1

            init_comb_dict[tuple(comb_state)] = (
                final_probs_1[index_1] * final_probs_2[index_2]
            )

    for state in init_comb_dict.keys():
        index_AB = state_dict_sum[state]
        init_comb_all[index_AB] = init_comb_dict[state]
    return init_comb_all


def combine_states_general(
    state_dict_1, state_dict_2, state_dict_sum, final_probs_1, final_probs_2
):
    pi_dict = {}
    # Open implementation for possible 4 species
    if len(final_probs_1.keys()) > 1 and len(final_probs_2.keys()) > 1:
        # for path1, prob1 in final_probs_1.items():
        # for path2, prob2 in final_probs_2.items():
        raise NotImplementedError

    elif len(final_probs_1.keys()) > 1 and len(final_probs_2.keys()) == 1:
        for path1, prob1 in final_probs_1.items():
            prob2 = final_probs_2[0]
            pi_vector_combined = combine_states(
                state_dict_1, state_dict_2, state_dict_sum, prob1, prob2
            )
            pi_dict[path1] = pi_vector_combined
        return pi_dict

    elif len(final_probs_1.keys()) == 1 and len(final_probs_2.keys()) == 1:
        prob1 = final_probs_1[0]
        prob2 = final_probs_2[0]
        pi_vector_combined = combine_states(
            state_dict_1, state_dict_2, state_dict_sum, prob1, prob2
        )
        return pi_vector_combined
    else:
        raise Exception("Invalid final_probs_1 or final_probs_2")


""" 
combined = combine_states(state_dict_a, state_dict_b, state_dict_ab, final_a, final_b)
new_combined = combine_states_general(
    state_dict_ab, state_dict_c, state_dict_abc, final_ab_dict, final_c_dict
)

print(new_combined)
 """
